{"version":3,"sources":["Comp/Berita.js","Comp/BeritaDetail.js","Comp/Home.js","Comp/Hamana404.js","App.js","serviceWorker.js","index.js"],"names":["Berita","props","hendelClik","e","preventDefault","state","items","isLoading","bind","this","getUser","fetch","then","r","json","data","setState","Fragment","onClick","map","item","index","key","id","to","title","Component","BeritaDetail","match","params","judul","Home","Halaman404","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TA0DeA,E,YArDX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAaVC,WAAa,SAAAC,GACTA,EAAEC,kBAZF,EAAKC,MAAQ,CACTC,MAAQ,GACRC,WAAY,GAEhB,EAAKL,WAAa,EAAKA,WAAWM,KAAhB,gBAPJ,E,iFAWdC,KAAKC,Y,gCAQC,IAAD,OACL,OAAOC,MAAM,8CACVC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEV,MAAOS,EAAMR,WAAW,S,+BAGlD,IAAD,EACuBE,KAAKJ,MAA1BC,EADF,EACEA,MAEP,OAHK,EACUC,UAIP,6CAKN,kBAAC,IAAMU,SAAP,KACE,2CACA,4BAAQC,QAAST,KAAKP,YAAtB,oBACA,4BACGI,EAAMa,KAAI,SAACC,EAAMC,GAAP,OACT,yBAAKC,IAAKF,EAAKG,IACb,4BACE,kBAAC,OAAD,CAAMC,GAAI,WAAaJ,EAAKK,OAAQL,EAAKK,kB,GA3CxCC,aCCNC,MAHf,YAAgC,IAATC,EAAQ,EAARA,MACnB,OAAO,8CAAoBA,EAAMC,OAAOC,QCQ7BC,E,iLANP,OACK,+C,GAHML,aCaJM,E,iLARP,OACE,6BACE,+C,GAJaN,aCgCVO,E,iLAxBX,OACE,kBAAC,IAAD,KAEI,6BACE,4BACE,kBAAC,IAAD,CAAMT,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,YAGJ,8BACE,kBAAC,SAAD,KACE,kBAAC,QAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAWL,IACjC,kBAAC,QAAD,CAAOG,KAAK,UAAUC,OAAK,EAACC,UAAWpC,IACvC,kBAAC,QAAD,CAAOkC,KAAK,iBAAiBC,OAAK,EAACC,UAAWT,IAC9C,kBAAC,QAAD,CAAOS,UAAWJ,W,GApBdN,aCEEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCZNa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.9bfffaa0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { link } from 'fs';\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\n\nclass Berita extends Component{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            items : [] , \n            isLoading : true\n        }\n        this.hendelClik = this.hendelClik.bind(this)\n    }\n\n    componentDidMount() {\n        this.getUser()\n    }\n\n    hendelClik = e => {\n        e.preventDefault()\n        // this.getUser()\n    }\n\n    getUser(){\n        return fetch(\"https://jsonplaceholder.typicode.com/todos\")\n          .then(r => r.json())\n          .then(data => this.setState({ items: data, isLoading: false }));\n    } \n\n    render() {\n        const {items , isLoading} = this.state\n        \n        if(isLoading){\n            return(\n                <p>Loading ......</p>\n            )\n        }\n\n        return (\n          <React.Fragment>\n            <h3>List Berita</h3>\n            <button onClick={this.hendelClik}>Get Data Beritaa</button>\n            <ul>\n              {items.map((item, index) => (\n                <div key={item.id}>\n                  <li>\n                    <Link to={\"/berita/\" + item.title}>{item.title}</Link>\n                  </li>\n                </div>\n              ))}\n            </ul>\n          </React.Fragment>\n        );\n    }\n\n}\n\nexport default Berita;","import React from 'react'\n\nfunction BeritaDetail({match}) {\n    return <h2>Judul Berita : {match.params.judul}</h2>\n}\nexport default BeritaDetail\n","import React, { Component } from 'react';\n\n\nclass Home extends Component{\n    render() {\n        return (\n             <p>Halaman Home</p>\n        );\n    }\n}\n\nexport default Home","import React, { Component } from 'react'\nimport { BrowserRouter, Switch , Route } from \"react-router-dom\";\nimport Home from \"./Home\"\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\n\n\nclass Halaman404 extends Component{\n    render() {\n        return (\n          <div>\n            <p>Halaman 404</p>\n          </div>\n        );\n    }\n}\n\nexport default Halaman404","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport Berita from \"./Comp/Berita\";\nimport BeritaDetail from \"./Comp/BeritaDetail\";\nimport Halaman404 from \"./Comp/Hamana404\";\nimport Home from \"./Comp/Home\";\n\n\n\nclass App extends Component {\n  \n\n  render() {\n    return (\n      <BrowserRouter>\n        \n          <nav>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/berita\">Berita</Link>\n            </li>\n          </nav>\n          <main>\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/berita\" exact component={Berita} />\n              <Route path=\"/berita/:judul\" exact component={BeritaDetail} />\n              <Route component={Halaman404}/>\n            </Switch>\n          </main>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}